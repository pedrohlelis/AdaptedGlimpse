// <auto-generated />
using System;
using Glimpse.Migrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Glimpse.Migrations
{
    [DbContext(typeof(GlimpseContext))]
    [Migration("20240402164900_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Glimpse.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("CreationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponsibleUserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.HasIndex("ResponsibleUserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Glimpse.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<bool>("CanCreateRole")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRemoveMembers")
                        .HasColumnType("bit");

                    b.Property<int>("FkProjectsProjectIdProjectId")
                        .HasColumnType("int");

                    b.Property<int>("FkUsersUserIdUserId")
                        .HasColumnType("int");

                    b.Property<string>("RoleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.HasIndex("FkProjectsProjectIdProjectId");

                    b.HasIndex("FkUsersUserIdUserId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Glimpse.Models.Team", b =>
                {
                    b.Property<int>("FkUsersUserId")
                        .HasColumnType("int");

                    b.Property<int>("FkProjectsProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("FkRolesRoleId")
                        .HasColumnType("int");

                    b.HasKey("FkUsersUserId", "FkProjectsProjectId");

                    b.HasIndex("FkProjectsProjectId");

                    b.HasIndex("FkRolesRoleId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Glimpse.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("ProjectsProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsProjectId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("Glimpse.Models.Project", b =>
                {
                    b.HasOne("Glimpse.Models.User", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("Glimpse.Models.Role", b =>
                {
                    b.HasOne("Glimpse.Models.Project", "FkProjectsProjectId")
                        .WithMany("Roles")
                        .HasForeignKey("FkProjectsProjectIdProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Glimpse.Models.User", "FkUsersUserId")
                        .WithMany("Roles")
                        .HasForeignKey("FkUsersUserIdUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkProjectsProjectId");

                    b.Navigation("FkUsersUserId");
                });

            modelBuilder.Entity("Glimpse.Models.Team", b =>
                {
                    b.HasOne("Glimpse.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("FkProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Glimpse.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("FkRolesRoleId");

                    b.HasOne("Glimpse.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("FkUsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("Glimpse.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Glimpse.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Glimpse.Models.Project", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Glimpse.Models.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
