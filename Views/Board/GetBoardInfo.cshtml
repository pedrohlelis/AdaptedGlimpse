@using Glimpse.ViewModels;

@model BoardVM;
@{
    Layout = "_BasicLayout";
    ViewData["StylesheetUrl"] = "~/css/index.css";
    ViewData["Title"] = Model.Board.Name;
}
<br><br>



<div class="sideBar d-flex flex-column">
    <div class="top mb-5">
        <div class="logo">
            <img class="menuLogo" src="~/Icons/GlimpseLogo.svg" alt="">
            <span class="text-white">Glimpse</span>
        </div>
        <box-icon name="menu" color="white" id="side-menu-btn"></box-icon>
    </div>
    <div class="d-flex flex-column mb-3">
        <div class="sideBar-item">
            <a class="button-style-2 h-100" href="">
                <box-icon name='cog' color="white"></box-icon>
                <span class="SB-nav-item">Settings</span>
            </a>
            <span class="tooltip">Settings</span>
        </div>
        <div class="sideBar-item" >
            <a class="button-style-2 h-100" asp-action="MainProjects" asp-controller="Project">
                <box-icon name='briefcase-alt' color="white"></box-icon>
                <span class="SB-nav-item">Projects</span>
            </a>
            <span class="tooltip">Projects</span>
        </div>
        <div class="sideBar-item">
            <a class="button-style-2  h-100" asp-action="Logout" asp-controller="Account">
                <box-icon name='log-out' color="white"></box-icon>
                <span class="SB-nav-item">Logout</span>
            </a>
            <span class="tooltip">Logout</span>
        </div>
    </div>

    <div class="container mt-5">
        <div class="profile-container">
            <img class="user-img" src='@(Model.User.Picture ?? Url.Content("~/default-images/default-avatar.jpg"))' alt="">
            <div class="profile-info">
                <div>@Model.User.FirstName @Model.User.LastName</div>
                <div class="profile-status data-bs-toggle="tooltip" data-bs-placement="top" title="@Model.User.UserName">
                    <div>@Model.User.UserName</div>
                </div>
            </div>
            <div class="profile-icons">
                <div class="dropup">
                    <box-icon data-bs-toggle="dropdown" aria-expanded="true" class="options-dots" name='dots-vertical-rounded' color="white"></box-icon>
                    <div class="dropdown-menu dropdown-menu-right dropdown-menu-dark">
                        <a class="dropdown-item" asp-action="Profile" asp-controller="User">Profile</a>
                        <hr class="dropdown-divider">
                        <a class="dropdown-item" asp-action="Logout" asp-controller="Account">Logout</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="memberSideMenu d-flex flex-column active">
    @foreach (var role in Model.ProjectRoles)
    {
        <div class="role-container mt-4">
            <h5>@role.Name</h5>
            @foreach (var kvp in Model.UserRolesDictionary.Where(kvp => kvp.Value == role))
            {
                var user = kvp.Key;
                <div class="member-div container mt-3">
                    <div class="profile-container">
                        <img class="user-img" src='@(user.Picture ?? Url.Content("~/default-images/default-avatar.jpg"))' alt="">
                        <div class="profile-info">
                            <div>@user.FirstName @user.LastName</div>
                            <div class="profile-status" data-bs-toggle="tooltip" data-bs-placement="top" title="@user.UserName">
                                <div>@user.UserName</div>
                            </div>
                        </div>
                        <div class="profile-icons">
                            <div class="dropup">
                                <box-icon data-bs-toggle="dropdown" aria-expanded="true" class="options-dots" name='dots-vertical-rounded' color="white"></box-icon>
                                <div class="dropdown-menu dropdown-menu-right dropdown-menu-dark">
                                    <a class="dropdown-item" asp-action="Profile" asp-controller="User">Profile</a>
                                    <hr class="dropdown-divider">
                                    <a class="dropdown-item" asp-action="Logout" asp-controller="Account">Logout</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<div class="modal fade" id="rolesModal" tabindex="-1" aria-labelledby="rolesModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="rolesModalLabel">Project Roles</h5>
                <button type="button" class="btn-close bg-light" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul class="list-group">
                    @foreach(var role in Model.ProjectRoles)
                    {
                        <li data-id="@role.Id" class="list-group-item d-flex justify-content-between align-items-center" style="background-color: #1E1E1E;">
                            @role.Name
                            <div>
                                <button type="button" class="btn btn-primary btn-sm" onclick="editRole(@role.Id)">Edit</button>
                                <button type="button" class="btn btn-danger btn-sm" onclick="deleteRole(@role.Id)">Delete</button>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

<!-- Edit Role Modal -->
<div class="modal fade" id="editRoleModal" tabindex="-1" aria-labelledby="editRoleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="editRoleModalLabel">Edit Role</h5>
                <button type="button" class="btn-close bg-light" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editRoleForm">
                    
                    <input type="hidden" id="roleId" name="roleId" value="">
                    
                    <div class="mb-3">
                        <label for="roleName" class="form-label text-light">Name</label>
                        <input type="text" class="form-control" id="roleName" name="roleName" value="">
                    </div>
                    
                    <div class="mb-3">
                        <label for="roleDescription" class="form-label text-light">Description</label>
                        <textarea class="form-control" id="roleDescription" name="roleDescription" rows="3"></textarea>
                    </div>
                    
                    <div class="mb-3">
                        <label for="roleColor" class="form-label text-light">Color</label>
                        <input type="color" class="form-control" id="roleColor" name="roleColor" value="">
                    </div>
                    <!-- Permissions -->
                    <div class="mb-3">
                        <label class="form-label text-light">Permissions</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="canRemoveMember" name="canRemoveMember">
                            <label class="form-check-label text-light" for="canRemoveMember">
                                Can Remove Member
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="canInviteMember" name="canInviteMember">
                            <label class="form-check-label text-light" for="canInviteMember">
                                Can Invite Member
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="canManageCards" name="canManageCards">
                            <label class="form-check-label text-light" for="canManageCards">
                                Can Manage Cards
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="canManageTags" name="canManageTags">
                            <label class="form-check-label text-light" for="canManageTags">
                                Can Manage Tags
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="canManageChecklist" name="canManageChecklist">
                            <label class="form-check-label text-light" for="canManageChecklist">
                                Can Manage Checklist
                            </label>
                        </div>
                    </div>
                    <!-- Submit button -->
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </form>
            </div>
        </div>
    </div>
</div>

<section class="container board-menu-func d-flex justify-content-between">
    <div class="board-header">
        <p style="font-size: smaller; letter-spacing: 2px;">Seja bem-vindo!</p>
        <h1 class="fw-bold" style="letter-spacing: 2px;">@Model.Board.Name</h1>
        <div class="text-white">
            @foreach (var kvp in Model.UserRolesDictionary)
            {
                <p >User: @kvp.Key.FirstName @kvp.Key.LastName | Role: @kvp.Value.Name</p>
            }
        </div>
    </div>
    <button class="button-create new-lane-btn mx-5" style="width: 200px;">Adicionar Raia</button>
    <div class="d-flex justify-content-center">
            <box-icon name='hard-hat' type='solid' color="white" id="project-roles-btn"></box-icon>
            <box-icon name='bell' color="white"></box-icon>
            <box-icon name='user-plus' type='solid' color="white" ></box-icon>
            <box-icon name="group" color="white" id="member-side-menu-btn"></box-icon>
    </div>
</section>
<div class="main-content d-flex flex-column mx-auto">
    <br>
    <div class="d-flex mx-auto">
        <div class="board-main d-flex flex-row overflow-auto kanban" style="max-width: 1200px;">
            @foreach (Lane lane in Model.Board.Lanes)
            {
                <div style="width: 300px;" class="lane col lane mx-3" data-lane-id="@lane.Id">
                    <div class="d-flex align-content-center align-items-center px-1">
                        <p class="text-uppercase fw-bold fs-6">@lane.Name</p>
                        <p class="rounded-circle text-black bg-white">@lane.Cards.Count</p>
                    </div>
                    <hr>
                    <br>

                    <div class="col d-flex task-btn">
                        <a class="w-100 align-items-center add-card-link">
                            <button class="button-create add-card-button">
                                <div class="d-flex justify-content-center">
                                    <img class="px-1" src="/Icons/plusIcon.svg" alt="">  
                                    <p class="px-1 m-0">Nova Tarefa</p>
                                </div>
                            </button>
                        </a>
                    </div>
                    <br>

                    <form class="create-card-form" asp-action="CreateCard" asp-controller="Card" method="post" hidden>
                        <input name="name" class="w-100 py-3 border-3 border-primary text-white card-input" style="background-color: #1E1E1E; border-radius: 13px; outline: none;" placeholder="Nome do cartão" type="text">
                        <input name="laneId" value="@lane.Id" type="hidden">
                        <input name="id" value="@Model.Board.Id" type="hidden">
                    </form>

                    <div class="container card-col">
                        @foreach (Card card in lane.Cards)
                        {
                            <div class="card-link row py-3 border-bottom border-3 border-primary" 
                                style="background-color: #1E1E1E; border-radius: 13px; cursor: pointer;"
                                data-id="@card.Id"
                                data-name="@card.Name"
                                data-description="@card.Description"
                                data-date="@card.Date"
                                draggable="true">
                                <a class="text-white px-4 card-link" style="text-decoration: none; cursor: pointer;">@card.Name</a>
                            </div>
                            <br>
                        }
                    </div>
                </div>
            }
            <form class="create-lane-form" asp-action="CreateLane" asp-controller="Lane" method="post" hidden>
                <div style="width: 300px; height: 200px;" class="lane">
                    <div class="d-flex align-content-center align-items-center px-1">
                        <input name="name" class="text-white lane-input" placeholder="Nome da raia" type="text" autocomplete="off" style="outline: none;">
                        <input name="id" value="@Model.Board.Id" type="hidden">
                    </div>
                    <br>
                    <hr>
                </div>
            </form>
        </div>
    </div>
</div>

    <!-- Modal -->
    @* <div class="modal fade" id="ConfirmDeleteModal" tabindex="-1" aria-labelledby="CardInfo" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="ConfirmDeleteModalLabel">Account Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
            <div class="modal-body">
                <p>Are you sure you want to delete your account?</p>
                <p><strong>This action cannot be undone.</strong></p>
            </div>
            <form method="post" asp-action="DeleteProfile" id="form-delete" enctype="multipart/form-data">
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-danger" id="delete-submit">yes, delete</button>
                </div>
            </form>
            <form method="post" asp-action="DeleteProfile" id="form-delete" enctype="multipart/form-data">
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-danger" id="delete-submit">yes, delete</button>
                </div>
            </form>
        </div>
    </div> *@

<div id="overlay" class="overlay" hidden>
    <form id="edit-card-form" asp-action="EditCard" asp-controller="Card" method="post">
        <div id="overlay-content" class="overlay-content">
            
            <input type="hidden" name="cardId" id="cardId">
            <div class="d-flex overflow-auto">
                <input class="overflow-visible text-white fs-3" type="text" name="name" id="name" style="outline: none; background-color: #131313; border: none;">
            </div> 
            <div class="d-flex flex-column">
                <label for="description">Description:</label>
                <input type="text" name="description" id="description">
            </div>
            <div>
                <label for="date">Date:</label>
                <input type="date" name="date" id="date">
            </div>
            <input type="hidden" name="id" value="@Model.Board.Id">

            <button type="submit" id="save-button" class="button-save">Salvar</button>
        </div>
    </form>
</div>

<script src="https://unpkg.com/boxicons@2.1.4/dist/boxicons.js"></script>
@section Scripts {
    <script>
        
        function openRolesModal() {
            var myModal = new bootstrap.Modal(document.getElementById('rolesModal'));
            myModal.show();
        }

        // Function to handle editing a role
        function editRole(roleId) {

            var listItem = document.querySelector('[data-id="' + roleId + '"]');

            document.getElementById('roleId').value = roleId;
            document.getElementById('roleName').value = roleName;
            document.getElementById('roleDescription').value = roleDescription;
            document.getElementById('roleColor').value = roleColor;
            document.getElementById('canRemoveMember').checked = canRemoveMember;
            document.getElementById('canInviteMember').checked = canInviteMember;
            document.getElementById('canManageCards').checked = canManageCards;
            document.getElementById('canManageTags').checked = canManageTags;
            document.getElementById('canManageChecklist').checked = canManageChecklist;
            var editRoleModal = new bootstrap.Modal(document.getElementById('editRoleModal'));
            editRoleModal.show();
        }

        // Function to handle deleting a role
        function deleteRole(roleId) {
            // Implement your logic to handle deletion here
            console.log("Deleting role with ID: " + roleId);
        }

        // Event listener to open the modal when the icon is clicked
        document.getElementById('project-roles-btn').addEventListener('click', openRolesModal);

        //START of sidebar menu ---------------------------
        let memberSideMenuBtn = document.querySelector('#member-side-menu-btn')
        let memberSideMenu = document.querySelector('.memberSideMenu')
        let sideMenuBtn = document.querySelector('#side-menu-btn')
        let sideBar = document.querySelector(".sideBar")
        let mainContent = document.querySelector(".main-content")
        let memberDivs = document.querySelectorAll(".member-div")
        let rolesDivs = document.querySelectorAll(".role-container")

        if (memberDivs.length === 0) {
        console.error('No memberDiv elements found');
        }

        memberSideMenuBtn.onclick = function () {
            memberDivs.forEach(function (div) {
                div.classList.toggle('d-none');
            })
            rolesDivs.forEach(function (div){
                div.classList.toggle('d-none');
            })
            memberSideMenu.classList.toggle('active');
        };

        sideMenuBtn.onclick = function () {
            sideBar.classList.toggle('active')
            mainContent.classList.toggle('opacity-50')
        };
        //END of sidebar menu   ---------------------------

        document.addEventListener('DOMContentLoaded', function() {
            const overlay = document.getElementById('overlay');
            const overlayContent = document.getElementById('overlay-content');
            const editForm = document.getElementById('edit-card-form');
            const saveButton = document.getElementById('save-button');
            let isModified = false;

            // Função para mostrar o overlay
            function showOverlay() {
                overlay.removeAttribute('hidden');
            }

            // Função para esconder o overlay
            function hideOverlay() {
                overlay.setAttribute('hidden', true);
            }

            // Event listener para detectar mudanças nos inputs
            overlayContent.addEventListener('input', function() {
                isModified = true;
                saveButton.classList.add('button-save-modified');
            });

            // Event listener para o envio do formulário
            editForm.addEventListener('submit', function(event) {
                if (!isModified) {
                    event.preventDefault();
                    return false;
                }
            });

            // Event listener para mostrar o overlay quando um card é clicado
            const cards = document.querySelectorAll('.card-link');
            cards.forEach(card => {
                card.addEventListener('click', function(event) {
                    const cardId = card.dataset.id;
                    const cardName = card.dataset.name;
                    const cardDescription = card.dataset.description;
                    const cardDate = card.dataset.date;

                    document.getElementById('cardId').value = cardId;
                    document.getElementById('name').value = cardName;
                    document.getElementById('description').value = cardDescription;
                    document.getElementById('date').value = cardDate;

                    showOverlay();
                });
            });

            // Event listener para esconder o overlay quando clicar fora dele
            overlay.addEventListener('click', function(event) {
                if (event.target === overlay || event.target.classList.contains('close-button')) {
                    hideOverlay();
                }
            });
        });


        const addCardButtons = document.querySelectorAll('.add-card-button');
        const cardForms = document.querySelectorAll('.create-card-form');
        const cardInputs = document.querySelectorAll('.card-input');

        addCardButtons.forEach((button, index) => {
            button.addEventListener('click', function() {
                cardForms[index].removeAttribute('hidden');
                cardInputs[index].focus();
            });
        });

        const addLaneButton = document.querySelector('.new-lane-btn');
        const laneForm = document.querySelector('.create-lane-form');
        const laneInput = document.querySelector('.lane-input');

        addLaneButton.addEventListener('click', function() {
            laneForm.removeAttribute('hidden');
            laneInput.focus();
        });

        cardInputs.forEach((input) => {
            input.setAttribute('autocomplete', 'off');
        });

        laneInput.setAttribute('autocomplete', 'off');

        document.addEventListener('click', function(event) {
            cardForms.forEach((form, index) => {
                if (!event.target.closest('.create-card-form') && !event.target.closest('.add-card-button')) {
                    form.setAttribute('hidden', true);
                }
            });

            if (!event.target.closest('.create-lane-form') && !event.target.closest('.new-lane-btn')) {
                laneForm.setAttribute('hidden', true);
            }
        });
        // LOGICA DE MOVER CARDS
        const columns = document.querySelectorAll(".card-col");

        document.addEventListener("dragstart", (e) => {
            e.target.classList.add("dragging");
        });

        document.addEventListener("dragend", (e) => {
            e.target.classList.remove("dragging");
            saveCardOrder(); // Chama a função para salvar a ordem dos cards após o arrasto
        });

        columns.forEach((item) => {
            item.addEventListener("dragover", (e) => {
                e.preventDefault(); // Previne o comportamento padrão
                const dragging = document.querySelector(".dragging");
                const applyAfter = getNewPosition(item, e.clientY);

                if (applyAfter) {
                    applyAfter.insertAdjacentElement("afterend", dragging);
                } else {
                    item.prepend(dragging);
                }
            });
        });

        function getNewPosition(column, posY) {
            const cards = column.querySelectorAll(".item:not(.dragging)");
            let result;

            for (let refer_card of cards) {
                const box = refer_card.getBoundingClientRect();
                const boxCenterY = box.y + box.height / 2;

                if (posY >= boxCenterY) result = refer_card;
            }

            return result;
        }

        function saveCardOrder() {
            const lanesData = [];

            columns.forEach((lane) => {
                const laneId = lane.dataset.laneId;
                const cardIds = Array.from(lane.querySelectorAll(".item")).map((card) => card.dataset.cardId);
                lanesData.push({ laneId, cardIds });
            });

            // Enviar dados para o servidor via AJAX
            fetch('/caminho/do/seu/controller', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ lanes: lanesData })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erro ao salvar a ordem dos cards');
                }
                return response.json();
            })
            .then(data => {
                console.log('Ordem dos cards salva com sucesso:', data);
            })
            .catch(error => {
                console.error('Erro:', error);
            });
        }
    </script>
}
