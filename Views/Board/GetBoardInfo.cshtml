@using Glimpse.ViewModels;

@model BoardVM;
@{
    Layout = "_BasicLayout";
    ViewData["StylesheetUrl"] = "~/css/index.css";
    ViewData["Title"] = Model.Board.Name;
    Console.WriteLine(Model.Board.Name);

}
<br><br>

<div class="sideBar d-flex flex-column">
    <div class="top mb-5">
        <div class="logo">
            <img class="menuLogo" src="~/Icons/GlimpseLogo.svg" alt="">
            <span class="text-white">Glimpse</span>
        </div>
        <box-icon name="menu" color="white" id="side-menu-btn"></box-icon>
    </div>
    <div class="d-flex flex-column mb-3">
        <div class="sideBar-item">
            <a class="button-style-2 h-100" href="">
                <box-icon name='cog' color="white"></box-icon>
                <span class="SB-nav-item">Settings</span>
            </a>
            <span class="tooltip">Settings</span>
        </div>
        <div class="sideBar-item" >
            <a class="button-style-2 h-100" asp-action="MainProjects" asp-controller="Project">
                <box-icon name='briefcase-alt' color="white"></box-icon>
                <span class="SB-nav-item">Projects</span>
            </a>
            <span class="tooltip">Projects</span>
        </div>
        <div class="sideBar-item">
            <a class="button-style-2  h-100" asp-action="Logout" asp-controller="Account">
                <box-icon name='log-out' color="white"></box-icon>
                <span class="SB-nav-item">Logout</span>
            </a>
            <span class="tooltip">Logout</span>
        </div>
    </div>

    <div class="user">
        <a class="d-flex flex-fill" asp-action="Profile" asp-controller="User">
            <div class="user-img-border">
                <img class="user-img" src='@(Model.User.Picture != null ? Model.User.Picture : "~/Icons/default_avatar.webp")' alt="">
            </div>
            <div>
                <p class="bold">@Model.User.FirstName @Model.User.LastName</p>
                <p>@Model.User.UserName</p>
            </div>
        </a>
    </div>
</div>

<div class="main-content">
    <section
        class="d-flex board-menu-func container-fluid">
        <div class="board-header">
            <h3>@Model.Board.Name</h3>
        </div>
        <button class="new-lane-btn text-white .align-self-md-end" id="addLaneButton">
            <div class="d-flex justify-content-center align-content-center">
                <img class="PlusIcon" src="~/Icons/plusIcon.svg">
                <p class="me-auto mb-auto">Adicionar Raia</p>
            </div>
        </button>
    </section>
    <br>
    <div class="container d-flex overflow-visible">
        <div class="board-main d-flex">
            @foreach (Lane lane in Model.Board.Lanes)
            {
                <div style="width: 300px;" class="lane" data-lane-id="@lane.Id">
                    <div class=" lane-top-info d-flex align-content-between">
                        <p>@lane.Name</p>
                        <p class="number-circle">@lane.Cards.Count</p>
                    </div>
                    <ul class="card-list">
                        @foreach (Card card in lane.Cards)
                        {
                            <li class="card" draggable="true">
                                <p>@card.Name</p>
                            </li>
                        }
                    </ul>
                    <br>
                    <div class="new-card-btn text-white">
                        <button class="new-lane-btn text-white" id="addLaneButton">
                            <div class="d-flex justify-content-center align-content-center">
                                <img class="PlusIcon" src="~/Icons/plusIcon.svg">
                                <p class="me-auto mb-auto">Adicionar Tarefa</p>
                            </div>
                        </button>
                        <img class="PlusIcon" src="~/Icons/plusIcon.svg" alt="">
                        <a href="#" class="add-card-link">Nova Tarefa</a>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="ConfirmDeleteModal" tabindex="-1" aria-labelledby="ConfirmDeleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ConfirmDeleteModalLabel">Account Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete your account?</p>
                <p><strong>This action cannot be undone.</strong></p>
            </div>
            <form method="post" asp-action="DeleteProfile" id="form-delete" enctype="multipart/form-data">
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-danger" id="delete-submit">yes, delete</button>
                </div>
            </form>
            <form method="post" asp-action="DeleteProfile" id="form-delete" enctype="multipart/form-data">
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-danger" id="delete-submit">yes, delete</button>
                </div>
            </form>
            </div>
        </div>
    </div>
</div>

<script src="https://unpkg.com/boxicons@2.1.4/dist/boxicons.js"></script>

@section Scripts {
    <script>
        //START of sidebar menu ---------------------------
        let sideMenuBtn = document.querySelector('#side-menu-btn')
        let sideBar = document.querySelector(".sideBar")
        let mainContent = document.querySelector(".main-content")
        @* if (sidebar.classList.contains('active')) {
            sidebar.classList.remove('active');
            sidebar.classList.remove('expanding');
            sidebar.style.display = 'none';
        } else {
            sidebar.style.display = 'block';
            sidebar.classList.add('expanding');
            
            
            setTimeout(() => {
            sidebar.classList.add('active');
            sidebar.classList.remove('expanding');
            }, 500);
        } *@

        sideMenuBtn.onclick = function () {
            sideBar.classList.toggle('active')
            mainContent.classList.toggle('opacity-50')
        };
        //End of sidebar menu   ---------------------------
        document.getElementById('addLaneButton').addEventListener('click', function() {
            var form = document.createElement('form');
            form.className = 'lane-form';
            form.method = 'post';
            form.action = '@Url.Action("CreateLane", "Lane")';
            form.enctype = 'multipart/form-data';

            var input = document.createElement('input');
            input.type = 'text';
            input.name = 'name';
            input.value = 'Nome da Raia';
            input.className = 'lane-name-input';
            form.appendChild(input);

            var hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'id';
            hiddenInput.value = '@Model.Board.Id';
            form.appendChild(hiddenInput);

            var submit = document.createElement('input');
            submit.type = 'submit';
            submit.style.visibility = 'hidden';
            form.appendChild(submit);

            document.querySelector('.board-main').appendChild(form);
        });

        document.querySelectorAll('.add-card-link').forEach(function(link) {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                
                var laneElement = this.closest('.lane');

                var cardInput = document.createElement('input');
                cardInput.type = 'text';
                cardInput.className = 'card-name-input';
                cardInput.placeholder = 'Nome da Tarefa';
                laneElement.appendChild(cardInput);
                cardInput.focus();

                cardInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        var cardName = this.value.trim();
                        if (cardName !== '') {
                            var laneId = laneElement.getAttribute('data-lane-id');
                            createCard(cardName, laneId, laneElement, this);
                        }
                    }
                });
            });
        });

        function createCard(cardName, laneId, laneElement, inputElement) {
            $.ajax({
                url: '@Url.Action("CreateCard", "Card")',
                type: 'POST',
                data: {
                    name: cardName,
                    laneId: laneId
                },
                success: function() {
                    var newCard = document.createElement('li');
                    newCard.textContent = cardName;
                    laneElement.querySelector('.card-list').appendChild(newCard);
                    inputElement.remove();
                },
                error: function() {
                    alert('Erro ao criar a tarefa. Tente novamente.');
                }
            });
        }
    </script>
}