
@{
    ViewData["Title"] = "KanbanTest";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - My ASP.NET Application</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="~/css/index.css">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <style>
        
        .checkbox-container {
            margin-bottom: 20px;
        }
        .progress-bar {
            transition: width 0.5s ease, background-color 0.5s ease;
            background-color: rgb(109, 19, 255);
        }
        .checkmark {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            opacity: 0;
            transition: opacity 0.5s ease;
        }
        .progress-bar.completed .checkmark {
            opacity: 1;
        }
    </style>
    <br>
    <br>
    <br>
    <div class="container mt-5">
        <div class="checkbox-container">
            <label><input type="checkbox" class="task-checkbox"> Task 1</label><br>
            <label><input type="checkbox" class="task-checkbox"> Task 2</label><br>
            <label><input type="checkbox" class="task-checkbox"> Task 3</label><br>
            <label><input type="checkbox" class="task-checkbox"> Task 4</label><br>
            <label><input type="checkbox" class="task-checkbox"> Task 5</label>
            <label><input type="checkbox" class="task-checkbox"> Task 6</label>
        </div>

        <div class="progress">
            <div id="progress-bar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                <span class="checkmark">&#10004;</span>
            </div>
        </div>
    </div>

    <!-- jQuery, Popper.js, and Bootstrap JS -->
    

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const checkboxes = document.querySelectorAll('.task-checkbox');
            const progressBar = document.getElementById('progress-bar');
            const totalTasks = checkboxes.length;

            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', updateProgress);
            });

            function updateProgress() {
                let checked = 0;

                checkboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        checked++;
                    }
                });

                const percentage = (checked / totalTasks) * 100;
                progressBar.style.width = `${percentage}%`;
                progressBar.setAttribute('aria-valuenow', percentage);

                if (percentage >= 99.5) {
                    progressBar.style.backgroundColor = '#3BE73B'; // Green
                    progressBar.classList.add('completed');
                } else {
                    progressBar.style.backgroundColor = 'rgb(109, 19, 255)'; // Purple
                    progressBar.classList.remove('completed');
                }
            }
        });
    </script>
</body>
</html>

@section Scripts {
    @* <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script> *@
    @* <script src='https://cdn.jsdelivr.net/npm/popperjs/core@2.5.3/dist/umd/popper.min.js'></script> *@
    @* <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script> *@
}

@* <div class="board">
    <form id="todo-form">
        <input type="text" placeholder="New TODO..." id="todo-input" />
        <button type="submit">Add +</button>
    </form>

    <div class="lanes">
        <div class="swim-lane" id="todo-lane">
        <h3 class="heading">TODO</h3>

        <p class="task" draggable="true">Get groceries</p>
        <p class="task" draggable="true">Feed the dogs</p>
        <p class="task" draggable="true">Mow the lawn</p>
        </div>

        <div class="swim-lane">
        <h3 class="heading">Doing</h3>

        <p class="task" draggable="true">Binge 80 hours of Game of Thrones</p>
        </div>

        <div class="swim-lane">
        <h3 class="heading">Done</h3>

        <p class="task" draggable="true">
            Watch video of a man raising a grocery store lobster as a pet
        </p>
        </div>
    </div>
</div> *@


@* <style>
    * {
        padding: 0;
        margin: 0;
        box-sizing: border-box;
        font-family: sans-serif;

        -ms-overflow-style: none; /* IE and Edge */
        scrollbar-width: none; /* Firefox */
        }

        *::-webkit-scrollbar {
        display: none;
        }

        .board {
        width: 100%;
        height: 100vh;
        overflow: scroll;

        background-image: url(https://images.unsplash.com/photo-1519681393784-d120267933ba?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80);
        background-position: center;
        background-size: cover;
        }

        /* ---- FORM ---- */
        #todo-form {
        padding: 32px 32px 0;
        }

        #todo-form input {
        padding: 12px;
        margin-right: 12px;
        width: 225px;

        border-radius: 4px;
        border: none;

        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.25);
        background: white;

        font-size: 14px;
        outline: none;
        }

        #todo-form button {
        padding: 12px 32px;

        border-radius: 4px;
        border: none;

        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.25);
        background: #ffffff;
        color: black;

        font-weight: bold;
        font-size: 14px;
        cursor: pointer;
        }

        /* ---- BOARD ---- */
        .lanes {
        display: flex;
        align-items: flex-start;
        justify-content: start;
        gap: 16px;

        padding: 24px 32px;

        overflow: scroll;
        height: 100%;
        }

        .heading {
        font-size: 22px;
        font-weight: bold;
        margin-bottom: 8px;
        }

        .swim-lane {
        display: flex;
        flex-direction: column;
        gap: 12px;

        background: #f4f4f4;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.25);

        padding: 12px;
        border-radius: 4px;
        width: 225px;
        min-height: 120px;

        flex-shrink: 0;
        }

        .task {
        background: white;
        color: black;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.15);

        padding: 12px;
        border-radius: 4px;

        font-size: 16px;
        cursor: move;
        }

        .is-dragging {
        scale: 1.05;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.25);
        background: rgb(50, 50, 50);
        color: white;
        }
</style> *@

@* <script>
    ////////// TO DO //////////////
    const form = document.getElementById("todo-form");
    const input = document.getElementById("todo-input");
    const todoLane = document.getElementById("todo-lane");

    form.addEventListener("submit", (e) => {
    e.preventDefault();
    const value = input.value;

    if (!value) return;

    const newTask = document.createElement("p");
    newTask.classList.add("task");
    newTask.setAttribute("draggable", "true");
    newTask.innerText = value;

    newTask.addEventListener("dragstart", () => {
        newTask.classList.add("is-dragging");
    });

    newTask.addEventListener("dragend", () => {
        newTask.classList.remove("is-dragging");
    });

    todoLane.appendChild(newTask);

    input.value = "";
    });

    //////////DRAG //////////////

    const draggables = document.querySelectorAll(".task");
    const droppables = document.querySelectorAll(".swim-lane");

    draggables.forEach((task) => {
    task.addEventListener("dragstart", () => {
        task.classList.add("is-dragging");
    });
    task.addEventListener("dragend", () => {
        task.classList.remove("is-dragging");
    });
    });

    droppables.forEach((zone) => {
    zone.addEventListener("dragover", (e) => {
        e.preventDefault();

        const bottomTask = insertAboveTask(zone, e.clientY);
        const curTask = document.querySelector(".is-dragging");

        if (!bottomTask) {
        zone.appendChild(curTask);
        } else {
        zone.insertBefore(curTask, bottomTask);
        }
    });
    });

    const insertAboveTask = (zone, mouseY) => {
    const els = zone.querySelectorAll(".task:not(.is-dragging)");

    let closestTask = null;
    let closestOffset = Number.NEGATIVE_INFINITY;

    els.forEach((task) => {
        const { top } = task.getBoundingClientRect();

        const offset = mouseY - top;

        if (offset < 0 && offset > closestOffset) {
        closestOffset = offset;
        closestTask = task;
        }
    });

    return closestTask;
    };

</script> *@
